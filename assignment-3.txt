1.	
Write a C/CPP program to create a child process. Child should print its pid and its parent’s pid and should exit by printing message as “Child Exiting …”. Parent should print its pid and should exit by printing message as “Parent Exiting ..”. 
(Hint(functions to be used) : getpid, fork, getppid) 

ans--

#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<unistd.h>
int main (){
    pid_t pid;

    pid = fork();
    if(pid ==0)
        printf("The child process is running- pid %d, ppid %d \n", getpid(), getppid());
    else if(pid > 0)
        printf("The parent process is running - pid %d, ppid %d \n", getpid(), getppid());
    else
        printf("Error creating new process through fork() \n");

    exit(0);
}

2.	
Write a program in C/CPP to check the scheduling policy used by the process and its priority. 
	(Hint(functions to be used) : sched_getscheduler, getpid) 

ans--

#include <stdio.h>
#include <unistd.h>
#include <sched.h>

main(int argc, char *argv[])
{
  pid_t pid;
  int policy;

  if (argc < 2)
    pid = 0;
  else
    pid = atoi(argv[1]);

  printf("Scheduler Policy for PID: %d  -> ", pid);

  policy = sched_getscheduler(pid);

  switch(policy) {
    case SCHED_OTHER: printf("SCHED_OTHER\n"); break;
    case SCHED_RR:   printf("SCHED_RR\n"); break;
    case SCHED_FIFO:  printf("SCHED_FIFO\n"); break;
    default:   printf("Unknown...\n");
  }
 }

3.	 
Write a program in C/CPP to get the current scheduling policy of the process. The program should change the scheduling policy to the other than current one. Program should report errors if it fails to set the new scheduling policy. 
	(Hint(functions to be used) : sched_setscheduler, getpid) 

ans--

main(int argc, char *argv[])
{
  pid_t pid;
  int policy;

  if (argc < 2)
    pid = 0;
  else
    pid = atoi(argv[1]);

  printf("Scheduler Policy for PID: %d  -> ", pid);

  policy = sched_getscheduler(pid);

  switch(policy) {
    case SCHED_OTHER: printf("SCHED_OTHER\n"); break;
    case SCHED_RR:   printf("SCHED_RR\n"); break;
    case SCHED_FIFO:  printf("SCHED_FIFO\n"); break;
    default:   printf("Unknown...\n");
  }
 }

4.Write a program in C/CPP to take process name, its arrival time and execution/burst time as input. 
ans--

#include<stdio.h>  
void findWaitingTime(int processes[], int n,   
                          int bt[], int wt[])  
{  
  
    wt[0] = 0;  
    
    for (int  i = 1; i < n ; i++ )  
        wt[i] =  bt[i-1] + wt[i-1] ;  
}  
    

void findTurnAroundTime( int processes[], int n,   
                  int bt[], int wt[], int tat[])  
{  
     
    for (int  i = 0; i < n ; i++)  
        tat[i] = bt[i] + wt[i];  
}  
    
  
void findavgTime( int processes[], int n, int bt[])  
{  
    int wt[n], tat[n], total_wt = 0, total_tat = 0;  
    
     
    findWaitingTime(processes, n, bt, wt);  
    
      
    findTurnAroundTime(processes, n, bt, wt, tat);  
    
     
    printf("Processes   Burst time   Waiting time   Turn around time\n");  
    
    for (int  i=0; i<n; i++)  
    {  
        total_wt = total_wt + wt[i];  
        total_tat = total_tat + tat[i];  
        printf("   %d ",(i+1)); 
        printf("       %d ", bt[i] ); 
        printf("       %d",wt[i] ); 
        printf("       %d\n",tat[i] );  
    }  
    int s=(float)total_wt / (float)n; 
    int t=(float)total_tat / (float)n; 
    printf("Average waiting time = %d",s); 
    printf("\n"); 
    printf("Average turn around time = %d ",t);  
}  
    

int main()  
{  
    
    int processes[] = { 1, 2, 3};  
    int n = sizeof processes / sizeof processes[0];  
    
    
    int  burst_time[] = {10, 5, 8};  
    
    findavgTime(processes, n,  burst_time);  
    return 0;  
}  



